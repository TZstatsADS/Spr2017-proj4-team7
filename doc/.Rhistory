if (m!=r){
#lambda.new<-update1(u[[r]],u[[m]],lambda.new)
lambda.new<-update2(u[[r]],u[[m]],df[i,],lambda)
m<-r
}
cluster[[m]]<-c(cluster[[m]],i)
u[[m]]<-colMeans(df[cluster[[m]],])
# #u[[m]]<-df[cluster[[m]][1],-c(1,2,3)]
# u[[m]]<-unlist(df[cluster[[m]][1],-c(1,2,3)])
# for(s in 2:length(cluster[[m]])){
#   #u[[m]]<-u[[m]]+df[cluster[[m]][s],-c(1,2,3)]
#   u[[m]]<-u[[m]]+unlist(df[cluster[[m]][s],-c(1,2,3)])
# }
# u[[m]]<-u[[m]]/length(cluster[[m]])
}
}
u2<-unlist(u[[1]])
for (s in 2:K){
u2<-rbind(u2,unlist(u[[s]]))
}
return(list(lambda=lambda.new,K,label=y,center=u2,iteration=j))
}
te<-sample(1:nrow(f1),100,replace = TRUE)
f2<-f1[te,]
f1<-f1[-te,]
time<-system.time(flambda<-train(f1))
test<-function(df,lambda,K,label,center){
y<-df[,1]
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
y2<-c()
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,],center[k,],lambda))
}
m<-which.min(distance)
y2<-c(y2,m)
}
y2<-label[y2]
accuracy<-mean(y==y2)
return(list(y2,y,accuracy))
}
result<-test(f2,flambda$lambda,flambda[[2]],flambda$label,flambda$center)
result
result2<-test(f1,flambda$lambda,flambda[[2]],flambda$label,flambda$center)
result2
hist(flambda$lambda)
max(flambda$lambda)
min(flambda$lambda)
dim(flambda$center)
flambda$``
flambda[[2]]
te<-sample(1:nrow(f1),10,replace = TRUE)
f2<-f1[te,]
f1<-f1[-te,]
time<-system.time(flambda<-train(f1))
test<-function(df,lambda,K,label,center){
y<-df[,1]
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
y2<-c()
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,],center[k,],lambda))
}
m<-which.min(distance)
y2<-c(y2,m)
}
y2<-label[y2]
accuracy<-mean(y==y2)
return(list(y2,y,accuracy))
}
result<-test(f2,flambda$lambda,flambda[[2]],flambda$label,flambda$center)
result
flambda
flambda[[2]]
result2<-test(f1,flambda$lambda,flambda[[2]],flambda$label,flambda$center)
result1
result2
load(file="../output/feature1.Rdata")
load(file="../output/feature1.Rdata")
te<-sample(1:nrow(f1),10,replace = TRUE)
f2<-f1[te,]
f1<-f1[-te,]
time<-system.time(flambda<-train(f1))
test<-function(df,lambda,K,label,center){
y<-df[,1]
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
y2<-c()
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,],center[k,],lambda))
}
m<-which.min(distance)
y2<-c(y2,m)
}
y2<-label[y2]
accuracy<-mean(y==y2)
return(list(y2,y,accuracy))
}
result<-test(f2,flambda$lambda,flambda[[2]],flambda$label,flambda$center)
result
result2<-test(f1,flambda$lambda,flambda[[2]],flambda$label,flambda$center)
result2
unique(1:5)
unique(c(1:5,1)
)
table(c(1,1,2,3,5))
test2<-function(df,lambda){
y<-df[,1]
k<-length(unique(y))
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
km_new<-function(x,a,k){
for(i in 1:ncol(x)){
x[,i]<-x[,i]*sqrt(a[i])
}
cl<-kmeans(x,k)
return(cl)
}
y2<-km_new(df,lambda,k)
cluster<-function(x){
return(length(x)-max(table(x)))
}
error<-tapply(y,y2,cluster)
return(list(y2,y,accuracy=(length(y)-sum(error))/length(y)))
}
re<-test2(f2,flambda$lambda)
load(file="../output/feature1.Rdata")
te<-sample(1:nrow(f1),100,replace = TRUE)
f2<-f1[te,]
f1<-f1[-te,]
time<-system.time(flambda<-train(f1))
test2<-function(df,lambda){
y<-df[,1]
k<-length(unique(y))
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
km_new<-function(x,a,k){
for(i in 1:ncol(x)){
x[,i]<-x[,i]*sqrt(a[i])
}
cl<-kmeans(x,k)
return(cl)
}
y2<-km_new(df,lambda,k)
cluster<-function(x){
return(length(x)-max(table(x)))
}
error<-tapply(y,y2,cluster)
return(list(y2,y,accuracy=(length(y)-sum(error))/length(y)))
}
re<-test2(f2,flambda$lambda)
df<-f2
y<-df[,1]
k<-length(unique(y))
k
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
y2<-km_new(df,lambda,k)
cluster<-function(x){
return(length(x)-max(table(x)))
}
error<-tapply(y,y2,cluster)
y2
error<-tapply(y,y2$cluster,cluster)
error
test2<-function(df,lambda){
y<-df[,1]
k<-length(unique(y))
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
km_new<-function(x,a,k){
for(i in 1:ncol(x)){
x[,i]<-x[,i]*sqrt(a[i])
}
cl<-kmeans(x,k)
return(cl)
}
y2<-km_new(df,lambda,k)
cluster<-function(x){
return(length(x)-max(table(x)))
}
error<-tapply(y,y2$cluster,cluster)
return(list(y2,y,accuracy=(length(y)-sum(error))/length(y)))
}
re<-test2(f2,flambda$lambda)
y<-df[,1]
y
df<-f2
y<-df[,1]
k<-length(unique(y))
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
km_new<-function(x,a,k){
for(i in 1:ncol(x)){
x[,i]<-x[,i]*sqrt(a[i])
}
cl<-kmeans(x,k)
return(cl)
}
y2<-km_new(df,lambda,k)
y2$cluster
cluster<-function(x){
return(length(x)-max(table(x)))
}
error<-tapply(y,y2$cluster,cluster)
error
re<-test2(f2,flambda$lambda)
lambda
lambda<-flambda$lambda
df<-f2
y<-df[,1]
k<-length(unique(y))
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
km_new<-function(x,a,k){
for(i in 1:ncol(x)){
x[,i]<-x[,i]*sqrt(a[i])
}
cl<-kmeans(x,k)
return(cl)
}
y2<-km_new(df,lambda,k)
train<-function(df){
y<-df[,1]
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
l<-levels(factor(y))
K<-length(l)
max.iteration<-10
d<-ncol(df)
lambda<-rep(0,d)
lambda.new<-rep(1,d)
weight<-rep(1,d)
j<-0
cluster<-list()
u<-list()
first_point<-function(t){
return(t[1])
}
d<-tapply(1:nrow(df),y,first_point)
for(i in 1:K){
cluster[[i]]<-c(d[i])
u[[i]]<-df[d[i],]
#u[[i]]<-unlist(df[d[i],-c(1,2,3)])
}
l<-y[d]
while (dist(lambda,lambda.new,weight)>0.1 & j<=max.iteration){
j<-j+1
lambda<-lambda.new
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,],u[[k]],lambda.new))
#distance<-c(distance,dist(unlist(df[i,-c(1,2,3)]),u[[k]],lambda.new))
}
m<-which.min(distance)
r<-which(l==y[i])
if (m!=r){
lambda.new<-update1(u[[r]],u[[m]],lambda.new)
#lambda.new<-update2(u[[r]],u[[m]],df[i,],lambda)
m<-r
}
cluster[[m]]<-c(cluster[[m]],i)
u[[m]]<-colMeans(df[cluster[[m]],])
# #u[[m]]<-df[cluster[[m]][1],-c(1,2,3)]
# u[[m]]<-unlist(df[cluster[[m]][1],-c(1,2,3)])
# for(s in 2:length(cluster[[m]])){
#   #u[[m]]<-u[[m]]+df[cluster[[m]][s],-c(1,2,3)]
#   u[[m]]<-u[[m]]+unlist(df[cluster[[m]][s],-c(1,2,3)])
# }
# u[[m]]<-u[[m]]/length(cluster[[m]])
}
}
u2<-unlist(u[[1]])
for (s in 2:K){
u2<-rbind(u2,unlist(u[[s]]))
}
return(list(lambda=lambda.new,K,label=y,center=u2,iteration=j))
}
te<-sample(1:nrow(f1),100,replace = TRUE)
f2<-f1[te,]
f1<-f1[-te,]
time<-system.time(flambda<-train(f1))
time<-system.time(flambda<-train(f1))
test<-function(df,lambda,K,label,center){
y<-df[,1]
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
y2<-c()
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,],center[k,],lambda))
}
m<-which.min(distance)
y2<-c(y2,m)
}
y2<-label[y2]
accuracy<-mean(y==y2)
return(list(y2,y,accuracy))
}
test2<-function(df,lambda){
y<-df[,1]
k<-length(unique(y))
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
km_new<-function(x,a,k){
for(i in 1:ncol(x)){
x[,i]<-x[,i]*sqrt(a[i])
}
cl<-kmeans(x,k)
return(cl)
}
y2<-km_new(df,lambda,k)
cluster<-function(x){
return(length(x)-max(table(x)))
}
error<-tapply(y,y2$cluster,cluster)
return(list(y2,y,accuracy=(length(y)-sum(error))/length(y)))
}
re<-test2(f2,flambda$lambda)
re
re<-test2(f2,rep(1,ncol(f2)))
re
re<-test2(f2,rep(1,ncol(f2)))
re
re<-test2(f2,flambda$lambda)
re
load(file="../output/feature1.Rdata")
colnames(f1)[1:3]<-colnames(df1)[1:3]
update1<-function(mu1,mu2,a){
d<-abs(mu2-mu1)
a<-a*(1+d/sum(d))
return(a)
}
update2<-function(mu.t,mu.f,err,a){
d.t<-abs(mu.t-err)+0.001
d.f<-abs(mu.f-err)
a<-a*sqrt(d.f/d.t)
return(a)
}
dist<-function(a1,a2,l){
n<-length(a1)
x<-(a1-a2)^2
x<-l*x
return(sum(x))
}
train<-function(df){
y<-df[,1]
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
l<-levels(factor(y))
K<-length(l)
max.iteration<-100
d<-ncol(df)
lambda<-rep(0,d)
lambda.new<-rep(1,d)
weight<-rep(1,d)
j<-0
cluster<-list()
u<-list()
first_point<-function(t){
return(t[1])
}
d<-tapply(1:nrow(df),y,first_point)
for(i in 1:K){
cluster[[i]]<-c(d[i])
u[[i]]<-df[d[i],]
#u[[i]]<-unlist(df[d[i],-c(1,2,3)])
}
l<-y[d]
while (dist(lambda,lambda.new,weight)>0.01 & j<=max.iteration){
j<-j+1
lambda<-lambda.new
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,],u[[k]],lambda.new))
#distance<-c(distance,dist(unlist(df[i,-c(1,2,3)]),u[[k]],lambda.new))
}
m<-which.min(distance)
r<-which(l==y[i])
if (m!=r){
lambda.new<-update1(u[[r]],u[[m]],lambda.new)
#lambda.new<-update2(u[[r]],u[[m]],df[i,],lambda)
m<-r
}
cluster[[m]]<-c(cluster[[m]],i)
u[[m]]<-colMeans(df[cluster[[m]],])
# #u[[m]]<-df[cluster[[m]][1],-c(1,2,3)]
# u[[m]]<-unlist(df[cluster[[m]][1],-c(1,2,3)])
# for(s in 2:length(cluster[[m]])){
#   #u[[m]]<-u[[m]]+df[cluster[[m]][s],-c(1,2,3)]
#   u[[m]]<-u[[m]]+unlist(df[cluster[[m]][s],-c(1,2,3)])
# }
# u[[m]]<-u[[m]]/length(cluster[[m]])
}
}
u2<-unlist(u[[1]])
for (s in 2:K){
u2<-rbind(u2,unlist(u[[s]]))
}
return(list(lambda=lambda.new,K,label=y,center=u2,iteration=j))
}
#test
te<-sample(1:nrow(f1),100,replace = TRUE)
f2<-f1[te,]
f1<-f1[-te,]
time<-system.time(flambda<-train(f1))
update2<-function(mu.t,mu.f,err,a){
d.t<-abs(mu.t-err)+0.01
d.f<-abs(mu.f-err)+0.01
a<-a*(d.f/d.t)
return(a)
}
dist<-function(a1,a2,l){
n<-length(a1)
x<-(a1-a2)^2
x<-l*x
return(sum(x))
}
train<-function(df){
y<-df[,1]
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
l<-levels(factor(y))
K<-length(l)
max.iteration<-20
d<-ncol(df)
lambda<-rep(0,d)
lambda.new<-rep(1,d)
weight<-rep(1,d)
j<-0
cluster<-list()
u<-list()
first_point<-function(t){
return(t[1])
}
d<-tapply(1:nrow(df),y,first_point)
for(i in 1:K){
cluster[[i]]<-c(d[i])
u[[i]]<-df[d[i],]
#u[[i]]<-unlist(df[d[i],-c(1,2,3)])
}
l<-y[d]
while (dist(lambda,lambda.new,weight)>0.01 & j<=max.iteration){
j<-j+1
lambda<-lambda.new
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,],u[[k]],lambda.new))
#distance<-c(distance,dist(unlist(df[i,-c(1,2,3)]),u[[k]],lambda.new))
}
m<-which.min(distance)
r<-which(l==y[i])
if (m!=r){
#lambda.new<-update1(u[[r]],u[[m]],lambda.new)
lambda.new<-update2(u[[r]],u[[m]],df[i,],lambda)
m<-r
}
cluster[[m]]<-c(cluster[[m]],i)
u[[m]]<-colMeans(df[cluster[[m]],])
# #u[[m]]<-df[cluster[[m]][1],-c(1,2,3)]
# u[[m]]<-unlist(df[cluster[[m]][1],-c(1,2,3)])
# for(s in 2:length(cluster[[m]])){
#   #u[[m]]<-u[[m]]+df[cluster[[m]][s],-c(1,2,3)]
#   u[[m]]<-u[[m]]+unlist(df[cluster[[m]][s],-c(1,2,3)])
# }
# u[[m]]<-u[[m]]/length(cluster[[m]])
}
}
u2<-unlist(u[[1]])
for (s in 2:K){
u2<-rbind(u2,unlist(u[[s]]))
}
return(list(lambda=lambda.new,K,label=y,center=u2,iteration=j))
}
te<-sample(1:nrow(f1),100,replace = TRUE)
f2<-f1[te,]
f1<-f1[-te,]
load(file="../output/feature1.Rdata")
f1<-f1[-te,]
te
test2<-function(df,lambda){
y<-df[,1]
k<-length(unique(y))
df<-df[,-1:-3]
df<-matrix(unlist(df),nrow(df),ncol(df))
km_new<-function(x,a,k){
for(i in 1:ncol(x)){
x[,i]<-x[,i]*sqrt(a[i])
}
cl<-kmeans(x,k)
return(cl)
}
y2<-km_new(df,lambda,k)
cluster<-function(x){
return(length(x)-max(table(x)))
}
error<-tapply(y,y2$cluster,cluster)
return(list(y2$cluster,y,accuracy=(length(y)-sum(error))/length(y)))
}
re<-test2(f2,flambda$lambda)
re
time<-system.time(flambda<-train(f1))
