x<-(a1-a2)^2
x<-l*x
return(sum(x))
}
while (dist(lambda,lambda.new,weight)>0.1 & j<=max.iteration){
j<-j+1
lambda<-lambda.new
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,-c(1,2,3)],u[k],lambda))
}
m<-which.min(distance)
r<-which(d[,1]==df$author.id[i])
if (m!=r){
#lambda.new<-update1(u[r,],u[m,],lambda)
lambda.new<-update2(u[r,],u[m,],df[i,-c(1,2,3)],lambda)
m<-df$author.id[i]
}
cluster[[m]]<-c(cluster[[m]],i)
u[m,]<-colMeans(df[cluster[[m]],-c(1,2,3)])
}
}
return(lambda.new)
}
train(f1)
y<-df$author.id
l<-levels(factor(y))
K<-length(l)
max.iteration<-10000
d<-ncol(df)-3
lambda<-rep(0,d)
lambda.new<-rep(1,d)
weight<-rep(1,d)
j<-0
cluster<-list()
u<-matrix(nrow=K)
first_point<-function(t){
return(c(t$author.id,which(as.numeric(t$paper.no)==1)))
}
d<-tapply(df,df$author.id,first_point)
length(df)
length(df$author.id)
?tapply
d<-tapply(df$author.id,df,first_point)
tapply(1:200,c(rep(1,100),rep(2,100)),mean)
tapply(data.frame(x1=1:200,x2=2:201),c(rep(1,100),rep(2,100)),mean)
l
d<-ddpply(df,.(author.id,df),first_point)
d<-ddply(df,.(author.id,df),first_point)
d<-ddply(df,.(author.id),first_point)
d<-daply(df,.(author.id),first_point)
dim(df)
first_point<-function(t){
return(c(t$author.id[1],which(as.numeric(t$paper.no)==1)))
}
d<-daply(df,.(author.id),first_point)
d
for(i in 1:K){
cluster[[i]]<-c(d[i,2])
u[i,]<-df[i,-c(1,2,3)]
}
df[i,-c(1,2,3)]
d
first_point<-function(t){
return(t[1])
}
d<-tapply(1:nrow(df),df$author.id,first_point)
d
l
as.numeric(l)
for(i in 1:K){
cluster[[i]]<-c(d[i])
u[i,]<-df[d[i],-c(1,2,3)]
}
u<-matrix(nrow=K,ncol=ncol(df)-3)
for(i in 1:K){
cluster[[i]]<-c(d[i])
u[i,]<-df[d[i],-c(1,2,3)]
}
for(i in 1:K){
cluster[[i]]<-c(d[i])
u[[i]]<-df[d[i],-c(1,2,3)]
}
d
l<-df$author.id[d]
l
l<-df$author.id[d]
dist<-function(a1,a2,l){
n<-length(a1)
x<-(a1-a2)^2
x<-l*x
return(sum(x))
}
while (dist(lambda,lambda.new,weight)>0.1 & j<=max.iteration){
j<-j+1
lambda<-lambda.new
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,-c(1,2,3)],u[[k]],lambda))
}
m<-which.min(distance)
r<-which(l[i]==df$author.id[i])
if (m!=r){
#lambda.new<-update1(u[[r]],u[[m]],lambda)
lambda.new<-update2(u[[r]],u[[m]],df[i,-c(1,2,3)],lambda)
m<-df$author.id[i]
}
cluster[[m]]<-c(cluster[[m]],i)
u[m,]<-colMeans(df[cluster[[m]],-c(1,2,3)])
}
}
1!=2
j<-j+1
lambda<-lambda.new
i<-1
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,-c(1,2,3)],u[[k]],lambda))
}
distance
m<-which.min(distance)
m
r<-which(l[i]==df$author.id[i])
r
l[i]
df$author.id[i]
r<-which(l==df$author.id[i])
r
if (m!=r){
#lambda.new<-update1(u[[r]],u[[m]],lambda)
lambda.new<-update2(u[[r]],u[[m]],df[i,-c(1,2,3)],lambda)
m<-r
}
cluster[[m]]<-c(cluster[[m]],i)
cluster[[10]]
u[m,]<-colMeans(df[cluster[[m]],-c(1,2,3)])
u[[m]]<-colMeans(df[cluster[[m]],-c(1,2,3)])
u[[10]]
train(fa)
train(f1)
load(file="../output/feature1.Rdata")
colnames(f1)[1:3]<-colnames(df1)[1:3]
update1<-function(mu1,mu2,a){
d<-abs(mu2-mu1)
a<-a*(1+d/sum(d))
return(a)
}
update2<-function(mu.t,mu.f,err,a){
d.t<-abs(mu.t-err)
d.f<-abs(mu.f-err)
a<-a*sqrt(d.f/d.t)
return(a)
}
train<-function(df){
y<-df$author.id
l<-levels(factor(y))
K<-length(l)
max.iteration<-10000
d<-ncol(df)-3
lambda<-rep(0,d)
lambda.new<-rep(1,d)
weight<-rep(1,d)
j<-0
cluster<-list()
u<-list()
first_point<-function(t){
return(t[1])
}
d<-tapply(1:nrow(df),df$author.id,first_point)
for(i in 1:K){
cluster[[i]]<-c(d[i])
u[[i]]<-df[d[i],-c(1,2,3)]
}
l<-df$author.id[d]
dist<-function(a1,a2,l){
n<-length(a1)
x<-(a1-a2)^2
x<-l*x
return(sum(x))
}
while (dist(lambda,lambda.new,weight)>0.1 & j<=max.iteration){
j<-j+1
lambda<-lambda.new
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,-c(1,2,3)],u[[k]],lambda))
}
m<-which.min(distance)
r<-which(l==df$author.id[i])
if (m!=r){
#lambda.new<-update1(u[[r]],u[[m]],lambda)
lambda.new<-update2(u[[r]],u[[m]],df[i,-c(1,2,3)],lambda)
m<-r
}
cluster[[m]]<-c(cluster[[m]],i)
u[[m]]<-colMeans(df[cluster[[m]],-c(1,2,3)])
}
}
return(lambda.new)
}
train(f1)
train<-function(df){
y<-df$author.id
l<-levels(factor(y))
K<-length(l)
max.iteration<-100
d<-ncol(df)-3
lambda<-rep(0,d)
lambda.new<-rep(1,d)
weight<-rep(1,d)
j<-0
cluster<-list()
u<-list()
first_point<-function(t){
return(t[1])
}
d<-tapply(1:nrow(df),df$author.id,first_point)
for(i in 1:K){
cluster[[i]]<-c(d[i])
u[[i]]<-df[d[i],-c(1,2,3)]
}
l<-df$author.id[d]
dist<-function(a1,a2,l){
n<-length(a1)
x<-(a1-a2)^2
x<-l*x
return(sum(x))
}
while (dist(lambda,lambda.new,weight)>1 & j<=max.iteration){
j<-j+1
lambda<-lambda.new
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,-c(1,2,3)],u[[k]],lambda))
}
m<-which.min(distance)
r<-which(l==df$author.id[i])
if (m!=r){
#lambda.new<-update1(u[[r]],u[[m]],lambda)
lambda.new<-update2(u[[r]],u[[m]],df[i,-c(1,2,3)],lambda)
m<-r
}
cluster[[m]]<-c(cluster[[m]],i)
u[[m]]<-colMeans(df[cluster[[m]],-c(1,2,3)])
}
}
return(lambda.new)
}
train(f1)
train<-function(df){
y<-df$author.id
l<-levels(factor(y))
K<-length(l)
max.iteration<-10
d<-ncol(df)-3
lambda<-rep(0,d)
lambda.new<-rep(1,d)
weight<-rep(1,d)
j<-0
cluster<-list()
u<-list()
first_point<-function(t){
return(t[1])
}
d<-tapply(1:nrow(df),df$author.id,first_point)
for(i in 1:K){
cluster[[i]]<-c(d[i])
u[[i]]<-df[d[i],-c(1,2,3)]
}
l<-df$author.id[d]
dist<-function(a1,a2,l){
n<-length(a1)
x<-(a1-a2)^2
x<-l*x
return(sum(x))
}
while (dist(lambda,lambda.new,weight)>1 & j<=max.iteration){
j<-j+1
lambda<-lambda.new
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,-c(1,2,3)],u[[k]],lambda))
}
m<-which.min(distance)
r<-which(l==df$author.id[i])
if (m!=r){
#lambda.new<-update1(u[[r]],u[[m]],lambda)
lambda.new<-update2(u[[r]],u[[m]],df[i,-c(1,2,3)],lambda)
m<-r
}
cluster[[m]]<-c(cluster[[m]],i)
u[[m]]<-colMeans(df[cluster[[m]],-c(1,2,3)])
}
}
return(lambda.new)
}
train(f1)
j<-j+1
y<-df$author.id
l<-levels(factor(y))
K<-length(l)
max.iteration<-10
d<-ncol(df)-3
lambda<-rep(0,d)
lambda.new<-rep(1,d)
weight<-rep(1,d)
j<-0
cluster<-list()
u<-list()
first_point<-function(t){
return(t[1])
}
d<-tapply(1:nrow(df),df$author.id,first_point)
for(i in 1:K){
cluster[[i]]<-c(d[i])
u[[i]]<-df[d[i],-c(1,2,3)]
}
l<-df$author.id[d]
dist<-function(a1,a2,l){
n<-length(a1)
x<-(a1-a2)^2
x<-l*x
return(sum(x))
}
j<-j+1
lambda<-lambda.new
for (i in 1:nrow(df)){
distance<-c()
for (k in 1:K){
distance<-c(distance,dist(df[i,-c(1,2,3)],u[[k]],lambda))
}
m<-which.min(distance)
r<-which(l==df$author.id[i])
if (m!=r){
#lambda.new<-update1(u[[r]],u[[m]],lambda)
lambda.new<-update2(u[[r]],u[[m]],df[i,-c(1,2,3)],lambda)
m<-r
}
cluster[[m]]<-c(cluster[[m]],i)
u[[m]]<-colMeans(df[cluster[[m]],-c(1,2,3)])
}
knitr::opts_chunk$set(echo = TRUE)
library(cluster)
?hcluster
?hclust
x1<-c(1,1,3,5,3,3)
x2<-c(4,3,4,2,2,0)
d<-cbind(x1,x2)
d
h<-hclust(d,method="single")
?dist
d1<-dist(d,method="manhattan")
d1
h<-hclust(d1,method="single")
plot(h)
knitr::opts_chunk$set(echo = TRUE)
H<-matrix(readBin("histograms.bin","double",640000),40000,16)
View(H)
dim(H)
View(H)
View(H)
?norm
b<-c(length=K)
x<-matrix(1:4,nrow=2)
x
exp(x)
exp(1:3)
x
x*c(1,2)
x*t(c(1,2))
t(x)*c(1,2)
t(t(x)*c(1,2))
1/c(1,2,3)
?apply
H<-matrix(readBin("histograms.bin","double",640000),40000,16)
MultinormialEM<-function(H,K,tau){
d<-ncol(H)
n<-nrow(H)
t<-matrix(nrow=K,ncol=d)
a<-matrix(rep(1/K,n*K),nrow=n,ncol=K)
fi<-matrix(nrow=n,ncol=K)
b<-c(length=K)
c<-rep(1/K,K)
t<-H[1:K,d]
delta<-norm(a,"O")
while (delta>tau){
a.old<-a
fi<-exp(H%*%t(t))
a<-t(t(fi)*c)
s<-rowSums(a)
a<-a*(1/s)
c<-colMeans(a)
b<-t(t(H)%*%a)
s<-rowSums(b)
t<-b*(1/s)
delta<-norm(a-a.old,"O")
}
m<-apply(a,1,which.max)
return(m)
}
MultinormialEM(H,3,0.1)
dim(H)
d<-ncol(H)
n<-nrow(H)
t<-matrix(nrow=K,ncol=d)
K=3
t<-matrix(nrow=K,ncol=d)
a<-matrix(rep(1/K,n*K),nrow=n,ncol=K)
fi<-matrix(nrow=n,ncol=K)
b<-c(length=K)
c<-rep(1/K,K)
t<-H[1:K,d]
t<-H[1:K,]
t
MultinormialEM<-function(H,K,tau){
d<-ncol(H)
n<-nrow(H)
a<-matrix(rep(1/K,n*K),nrow=n,ncol=K)
fi<-matrix(nrow=n,ncol=K)
b<-c(length=K)
c<-rep(1/K,K)
t<-H[1:K,]
delta<-norm(a,"O")
while (delta>tau){
a.old<-a
fi<-exp(H%*%t(t))
a<-t(t(fi)*c)
s<-rowSums(a)
a<-a*(1/s)
c<-colMeans(a)
b<-t(t(H)%*%a)
s<-rowSums(b)
t<-b*(1/s)
delta<-norm(a-a.old,"O")
}
m<-apply(a,1,which.max)
return(m)
}
MultinormialEM(H,3,0.1)
d<-ncol(H)
n<-nrow(H)
a<-matrix(rep(1/K,n*K),nrow=n,ncol=K)
fi<-matrix(nrow=n,ncol=K)
b<-c(length=K)
c<-rep(1/K,K)
t<-H[1:K,]
delta<-norm(a,"O")
a.old<-a
fi<-exp(H%*%t(t))
a<-t(t(fi)*c)
s<-rowSums(a)
a<-a*(1/s)
c<-colMeans(a)
b<-t(t(H)%*%a)
t<-b*(1/s)
delta<-norm(a-a.old,"O")
b<-t(t(H)%*%a)
s<-rowSums(b)
d<-ncol(H)
n<-nrow(H)
a<-matrix(rep(1/K,n*K),nrow=n,ncol=K)
fi<-matrix(nrow=n,ncol=K)
b<-c(length=K)
c<-rep(1/K,K)
t<-H[1:K,]
delta<-norm(a,"O")
a.old<-a
fi<-exp(H%*%t(t))
View(fi)
fi<-exp(H%*%t(log(t)))
View(fi)
t
log(t)
H<-H+0.01
MultinormialEM<-function(H,K,tau){
H<-H+0.01
d<-ncol(H)
n<-nrow(H)
a<-matrix(rep(1/K,n*K),nrow=n,ncol=K)
fi<-matrix(nrow=n,ncol=K)
b<-c(length=K)
c<-rep(1/K,K)
t<-H[1:K,]
delta<-norm(a,"O")
while (delta>tau){
a.old<-a
fi<-exp(H%*%t(log(t)))
a<-t(t(fi)*c)
s<-rowSums(a)
a<-a*(1/s)
c<-colMeans(a)
b<-t(t(H)%*%a)
s<-rowSums(b)
t<-b*(1/s)
delta<-norm(a-a.old,"O")
}
m<-apply(a,1,which.max)
return(m)
}
MultinormialEM(H,3,0.1)
plot(H)
hist(H
)
dim(m)
m<-MultinormialEM(H,3,0.1)
dim(m)
length(m)
